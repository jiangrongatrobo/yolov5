# parameters
nc: 80  # number of classes
depth_multiple: 0.67  # model depth multiple
width_multiple: 0.75  # layer channel multiple
# depth_multiple: 0.33  # model depth multiple
# width_multiple: 0.50  # layer channel multiple


# anchors
anchors:
- [28,31, 53,73, 91,39 ]  # P3/8
- [94,219, 120,86, 173,337]  # P4/16
- [214,99, 287,176, 376,365]  # P5/32

# YOLOv5 backbone
stem:
  # [from, max-number, module, args]
    [
      [-1, 1, ElasticConv, [64, [5,7], 2]],  # 0-P1/2
    ]
stage1:
   [
    [-1, 1, ElasticConv, [128, [3,5], 2]],  # 1-P2/4
    [-1, 3, ElasticBottleneck, [128, True, [3,5], [0.3, 0.5]]], # 2
   ]
stage2:
   [
    [-1, 1, ElasticConv, [256, [3,5], 2]],  # 3-P3/8
    [-1, 9, ElasticBottleneck, [256, True, [3,5], [0.3, 0.5]]], # 4
   ]
stage3:
   [
     [-1, 1, ElasticConv, [512, [3,5], 2]],  # 5-P4/16
    [-1, 9, ElasticBottleneck, [512, True, [3,5], [0.3, 0.5]]], # 6
   ]
stage4:
   [
     [-1, 1, ElasticConv, [1024,[3,5], 2]],  # 7-P5/32
     [-1, 1, SPP, [1024, [5, 9, 13]]], # 8
     [-1, 3, ElasticBottleneck, [1024, False, [3,5], [0.3, 0.5]]],  # 9
   ]

head1:
  [
    [-1, 3, ElasticBottleneck, [1024, False, [3,5], [0.3, 0.5]]]  # 10
  ]
head2:
  [
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], # 11
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4, 12
   [-1, 1, Conv, [512, 1, 1]], # 13
   [-1, 3, ElasticBottleneck, [512, False, [3,5], [0.3, 0.5]]], # 14
  ]
head3:
  [
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], # 15
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3, 16
   [-1, 1, Conv, [256, 1, 1]], # 17
   [-1, 3, ElasticBottleneck, [256, False, [3,5], [0.3, 0.5]]], # 18
  ]
Detect:
  [
   [[18, 14, 10], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
